{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,sBAAKC,UAAU,qDAAf,UACI,qBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAA1B,cACvB,gCACI,6BAAKF,IACL,4BAAIC,WCcLK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,8BAEGA,EAAOC,KAAI,SAACC,EAAMC,GACrB,OACA,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAQO,EAAOG,GAAGV,KAClBC,MAAOM,EAAOG,GAAGT,OAHZS,SCKFC,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAE7B,OACI,qBAAKV,UAAU,MAAf,SACI,uBAAOA,UAAU,gCACjBW,KAAO,SACPC,YAAY,gBACZC,SAAUH,OCCPI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YCiBJC,E,kDAnBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACVC,UAAW,GAHA,E,qDAOlB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG7B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,wDAEJG,KAAKX,MAAMK,a,GAhBCQ,aC8CZC,G,wDAxCX,aAAc,IAAD,8BACT,gBAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,SAbzC,EAAKX,MAAO,CACRlB,OAAQ,GACRK,YAAa,IAJR,E,qDAQb,WAAoB,IAAD,OACfyB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEvB,OAASkC,S,oBAO5C,WAAS,IAAD,EAC2BZ,KAAKJ,MAA7BlB,EADH,EACGA,OAAQK,EADX,EACWA,YACT8B,EAAgBnC,EAAOoC,QAAO,SAAAC,GAChC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASlC,EAAYiC,kBAEzD,OAAQtC,EAAOwC,OAGf,sBAAK5C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,uBACA,cAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACA,cAAC,EAAD,UACA,cAAC,EAAD,CAAU1B,OAAQmC,WAPlB,0D,GAzBMX,cCKHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.a331c714.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return(\r\n        <div className=\"tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt='robotvoe' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return(\r\n        <div>\r\n        {\r\n           robots.map((user, i) => {\r\n        return (\r\n        <Card \r\n            key={i} \r\n            id={robots[i].id} \r\n            name = {robots[i].name} \r\n            email={robots[i].email}\r\n        />\r\n        );\r\n    })\r\n    }\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n  \r\n    return(  \r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--blue bg-light-green' \r\n            type = 'search' \r\n            placeholder='search robots' \r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border :'1px solid black', height: '600px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n           hasError : false \r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError){\r\n            return <h1>Ooops. Je tu error....</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll'\r\nimport ErrorBoundry from '../Components/ErrorBoundry'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({ robots : users}));\r\n    }\r\n\r\n    onSearchChange = (event) =>{\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    render(){\r\n        const {robots, searchfield } = this.state;\r\n        const filteredRobots= robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        return !robots.length ?\r\n            <h1>Loading this shit...</h1> :\r\n        (\r\n        <div className='tc'>\r\n            <h1 className='f1'>RoboZmrdi</h1>\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n            <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n            </Scroll>\r\n            \r\n        </div>     \r\n        );\r\n\r\n    }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}